var v=Object.defineProperty;var x=(o,e,t)=>e in o?v(o,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):o[e]=t;var n=(o,e,t)=>(x(o,typeof e!="symbol"?e+"":e,t),t);(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const a of document.querySelectorAll('link[rel="modulepreload"]'))s(a);new MutationObserver(a=>{for(const r of a)if(r.type==="childList")for(const i of r.addedNodes)i.tagName==="LINK"&&i.rel==="modulepreload"&&s(i)}).observe(document,{childList:!0,subtree:!0});function t(a){const r={};return a.integrity&&(r.integrity=a.integrity),a.referrerPolicy&&(r.referrerPolicy=a.referrerPolicy),a.crossOrigin==="use-credentials"?r.credentials="include":a.crossOrigin==="anonymous"?r.credentials="omit":r.credentials="same-origin",r}function s(a){if(a.ep)return;a.ep=!0;const r=t(a);fetch(a.href,r)}})();class c{constructor(e){n(this,"api");this.api=e}async getRequest(e){return await this.api.makeRequest("GET",e)}async postRequest(e,t,s=void 0){return await this.api.makeRequest("POST",e,t,s)}async putRequest(e,t,s=void 0){return await this.api.makeRequest("PUT",e,t,s)}async deleteRequest(e,t){return await this.api.makeRequest("DELETE",e,t)}paramsFor(e){const t=new URLSearchParams;for(let s of Object.getOwnPropertyNames(e))(e[s]||!e[s]&&typeof e[s]=="boolean")&&t.append(s,e[s].toString());return[...t].length>0?`?${t.toString()}`:""}}class A extends c{async get(e,t){if(typeof e=="string"){const r=this.paramsFor({market:t});return await this.getRequest(`albums/${e}${r}`)}const s=this.paramsFor({ids:e,market:t});return(await this.getRequest(`albums${s}`)).albums}tracks(e,t,s,a){const r=this.paramsFor({market:t,limit:s,offset:a});return this.getRequest(`albums/${e}/tracks${r}`)}}class E extends c{async get(e){if(typeof e=="string")return this.getRequest(`artists/${e}`);const t=this.paramsFor({ids:e});return(await this.getRequest(`artists${t}`)).artists}albums(e,t,s,a,r){const i=this.paramsFor({include_groups:t,market:s,limit:a,offset:r});return this.getRequest(`artists/${e}/albums${i}`)}topTracks(e,t){const s=this.paramsFor({market:t});return this.getRequest(`artists/${e}/top-tracks${s}`)}relatedArtists(e){return this.getRequest(`artists/${e}/related-artists`)}}class U extends c{async get(e,t){if(typeof e=="string"){const r=this.paramsFor({market:t});return this.getRequest(`audiobooks/${e}${r}`)}const s=this.paramsFor({ids:e,market:t});return(await this.getRequest(`audiobooks${s}`)).audiobooks}getAudiobookChapters(e,t,s,a){const r=this.paramsFor({market:t,limit:s,offset:a});return this.getRequest(`audiobooks/${e}/chapters${r}`)}}class P extends c{getCategories(e,t,s,a){const r=this.paramsFor({country:e,locale:t,limit:s,offset:a});return this.getRequest(`browse/categories${r}`)}getCategory(e,t,s){const a=this.paramsFor({country:t,locale:s});return this.getRequest(`browse/categories/${e}${a}`)}getNewReleases(e,t,s){const a=this.paramsFor({country:e,limit:t,offset:s});return this.getRequest(`browse/new-releases${a}`)}getFeaturedPlaylists(e,t,s,a,r){const i=this.paramsFor({country:e,locale:t,timestamp:s,limit:a,offset:r});return this.getRequest(`browse/featured-playlists${i}`)}getPlaylistsForCategory(e,t,s,a){const r=this.paramsFor({country:t,limit:s,offset:a});return this.getRequest(`browse/categories/${e}/playlists${r}`)}}class I extends c{async get(e,t){if(typeof e=="string"){const r=this.paramsFor({market:t});return this.getRequest(`chapters/${e}${r}`)}const s=this.paramsFor({ids:e,market:t});return(await this.getRequest(`chapters${s}`)).chapters}}class O extends c{async get(e,t){if(typeof e=="string"){const r=this.paramsFor({market:t});return this.getRequest(`episodes/${e}${r}`)}const s=this.paramsFor({ids:e,market:t});return(await this.getRequest(`episodes${s}`)).episodes}}class L extends c{get(e){const t=this.paramsFor(e);return this.getRequest(`recommendations${t}`)}genreSeeds(){return this.getRequest("recommendations/available-genre-seeds")}}class B extends c{getAvailableMarkets(){return this.getRequest("markets")}}class N extends c{getPlaybackState(e,t){const s=this.paramsFor({market:e,additionalTypes:t});return this.getRequest(`me/player${s}`)}getAvailableDevices(){return this.getRequest("me/player/devices")}getCurrentlyPlayingTrack(e,t){const s=this.paramsFor({market:e,additionalTypes:t});return this.getRequest(`me/player/currently-playing${s}`)}getRecentlyPlayedTracks(e,t){const s={limit:e};t&&(t.type==="before"?s.before=t.timestamp:t.type==="after"&&(s.after=t.timestamp));const a=this.paramsFor(s);return this.getRequest(`me/player/recently-played${a}`)}getUsersQueue(){return this.getRequest("me/player/queue")}async transferPlayback(e,t){if(e.length>1)throw new Error("Although an array is accepted, only a single device_id is currently supported. Supplying more than one will return 400 Bad Request");await this.putRequest("me/player",{device_ids:e,play:t})}async startResumePlayback(e,t,s,a,r){const i=this.paramsFor({device_id:e});await this.putRequest(`me/player/play${i}`,{context_uri:t,uris:s,offset:a,positionMs:r})}async pausePlayback(e){const t=this.paramsFor({device_id:e});await this.putRequest(`me/player/pause${t}`)}async skipToNext(e){const t=this.paramsFor({device_id:e});await this.postRequest(`me/player/next${t}`)}async skipToPrevious(e){const t=this.paramsFor({device_id:e});await this.postRequest(`me/player/previous${t}`)}async seekToPosition(e,t){const s=this.paramsFor({position_ms:e,device_id:t});await this.putRequest(`me/player/seek${s}`)}async setRepeatMode(e,t){const s=this.paramsFor({state:e,device_id:t});await this.putRequest(`me/player/repeat${s}`)}async setPlaybackVolume(e,t){const s=this.paramsFor({volume_percent:e,device_id:t});await this.putRequest(`me/player/volume${s}`)}async togglePlaybackShuffle(e,t){const s=this.paramsFor({state:e,device_id:t});await this.putRequest(`me/player/shuffle${s}`)}async addItemToPlaybackQueue(e,t){const s=this.paramsFor({uri:e,device_id:t});await this.postRequest(`me/player/queue${s}`)}}class _ extends c{getPlaylist(e,t,s,a){const r=this.paramsFor({market:t,fields:s,additional_types:a});return this.getRequest(`playlists/${e}${r}`)}getPlaylistItems(e,t,s,a,r,i){const p=this.paramsFor({market:t,fields:s,limit:a,offset:r,additional_types:i});return this.getRequest(`playlists/${e}/tracks${p}`)}async changePlaylistDetails(e,t){await this.putRequest(`playlists/${e}`,t)}movePlaylistItems(e,t,s,a){return this.updatePlaylistItems(e,{range_start:t,range_length:s,insert_before:a})}updatePlaylistItems(e,t){return this.putRequest(`playlists/${e}/tracks`,t)}async addItemsToPlaylist(e,t,s){await this.postRequest(`playlists/${e}/tracks`,{position:s,uris:t})}async removeItemsFromPlaylist(e,t){await this.deleteRequest(`playlists/${e}/tracks`,t)}getUsersPlaylists(e,t,s){const a=this.paramsFor({limit:t,offset:s});return this.getRequest(`users/${e}/playlists${a}`)}createPlaylist(e,t){return this.postRequest(`users/${e}/playlists`,t)}getPlaylistCoverImage(e){return this.getRequest(`playlists/${e}/images`)}async addCustomPlaylistCoverImage(e,t){let s="";if(t instanceof Buffer)s=t.toString("base64");else if(t instanceof HTMLCanvasElement)s=t.toDataURL("image/jpeg").split(";base64,")[1];else if(t instanceof HTMLImageElement){const a=document.createElement("canvas");a.width=t.width,a.height=t.height;const r=a.getContext("2d");if(!r)throw new Error("Could not get canvas context");r.drawImage(t,0,0),s=a.toDataURL("image/jpeg").split(";base64,")[1]}else if(typeof t=="string")s=t;else throw new Error("ImageData must be a Buffer, HTMLImageElement, HTMLCanvasElement, or string containing a base64 encoded jpeg");await this.addCustomPlaylistCoverImageFromBase64String(e,s)}async addCustomPlaylistCoverImageFromBase64String(e,t){await this.putRequest(`playlists/${e}/images`,t,"image/jpeg")}}class j extends c{async execute(e,t,s,a,r,i){const p=this.paramsFor({q:e,type:t,market:s,limit:a,offset:r,include_external:i});return await this.getRequest(`search${p}`)}}class M extends c{async get(e,t){if(typeof e=="string"){const r=this.paramsFor({market:t});return this.getRequest(`shows/${e}${r}`)}const s=this.paramsFor({ids:e,market:t});return(await this.getRequest(`shows${s}`)).shows}episodes(e,t,s,a){const r=this.paramsFor({market:t,limit:s,offset:a});return this.getRequest(`shows/${e}/episodes${r}`)}}class z extends c{async get(e,t){if(typeof e=="string"){const r=this.paramsFor({market:t});return this.getRequest(`tracks/${e}${r}`)}const s=this.paramsFor({ids:e,market:t});return(await this.getRequest(`tracks${s}`)).tracks}async audioFeatures(e){if(typeof e=="string")return this.getRequest(`audio-features/${e}`);const t=this.paramsFor({ids:e});return(await this.getRequest(`audio-features${t}`)).audio_features}audioAnalysis(e){return this.getRequest(`audio-analysis/${e}`)}}const C={access_token:"",token_type:"",expires_in:0,refresh_token:"",expires:0};class J extends c{profile(e){return this.getRequest(`users/${e}`)}}class V extends c{constructor(t){super(t);n(this,"albums");n(this,"audiobooks");n(this,"episodes");n(this,"playlists");n(this,"shows");n(this,"tracks");this.albums=new D(t),this.audiobooks=new H(t),this.episodes=new K(t),this.playlists=new W(t),this.shows=new G(t),this.tracks=new Q(t)}profile(){return this.getRequest("me")}topItems(t,s,a,r){const i=this.paramsFor({time_range:s,limit:a,offset:r});return this.getRequest(`me/top/${t}${i}`)}followedArtists(t,s){const a=this.paramsFor({type:"artist",after:t,limit:s});return this.getRequest(`me/following${a}`)}async followArtistsOrUsers(t,s){const a=this.paramsFor({type:s});await this.putRequest(`me/following${a}`,{ids:t})}async unfollowArtistsOrUsers(t,s){const a=this.paramsFor({type:s});await this.deleteRequest(`me/following${a}`,{ids:t})}followsArtistsOrUsers(t,s){const a=this.paramsFor({ids:t,type:s});return this.getRequest(`me/following/contains${a}`)}}class D extends c{savedAlbums(e,t,s){const a=this.paramsFor({limit:e,offset:t,market:s});return this.getRequest(`me/albums${a}`)}async saveAlbums(e){await this.putRequest("me/albums",e)}async removeSavedAlbums(e){await this.deleteRequest("me/albums",e)}hasSavedAlbums(e){const t=this.paramsFor({ids:e});return this.getRequest(`me/albums/contains${t}`)}}class H extends c{savedAudiobooks(e,t){const s=this.paramsFor({limit:e,offset:t});return this.getRequest(`me/audiobooks${s}`)}async saveAudiobooks(e){await this.putRequest("me/audiobooks",e)}async removeSavedAudiobooks(e){await this.deleteRequest("me/audiobooks",e)}hasSavedAudiobooks(e){const t=this.paramsFor({ids:e});return this.getRequest(`me/audiobooks/contains${t}`)}}class K extends c{savedEpisodes(e,t,s){const a=this.paramsFor({market:e,limit:t,offset:s});return this.getRequest(`me/episodes${a}`)}async saveEpisodes(e){await this.putRequest("me/episodes",e)}async removeSavedEpisodes(e){await this.deleteRequest("me/episodes",e)}hasSavedEpisodes(e){const t=this.paramsFor({ids:e});return this.getRequest(`me/episodes/contains${t}`)}}class W extends c{playlists(e,t){const s=this.paramsFor({limit:e,offset:t});return this.getRequest(`me/playlists${s}`)}async follow(e){await this.putRequest(`playlists/${e}/followers`)}async unfollow(e){await this.deleteRequest(`playlists/${e}/followers`)}isFollowing(e,t){const s=this.paramsFor({ids:t});return this.getRequest(`playlists/${e}/followers/contains${s}`)}}class G extends c{savedShows(e,t){const s=this.paramsFor({limit:e,offset:t});return this.getRequest(`me/shows${s}`)}saveShows(e){const t=this.paramsFor({ids:e});return this.putRequest(`me/shows${t}`)}removeSavedShows(e,t){const s=this.paramsFor({ids:e,market:t});return this.deleteRequest(`me/shows${s}`)}hasSavedShow(e){const t=this.paramsFor({ids:e});return this.getRequest(`me/shows/contains${t}`)}}class Q extends c{savedTracks(e,t,s){const a=this.paramsFor({limit:e,offset:t,market:s});return this.getRequest(`me/tracks${a}`)}async saveTracks(e){await this.putRequest("me/tracks",e)}async removeSavedTracks(e){await this.deleteRequest("me/tracks",e)}hasSavedTracks(e){const t=this.paramsFor({ids:e});return this.getRequest(`me/tracks/contains${t}`)}}class Y{static get current(){return this.hasSubtleCrypto?window.crypto:this.tryLoadNodeWebCrypto()}static get hasSubtleCrypto(){return typeof window<"u"&&typeof window.crypto<"u"&&typeof window.crypto.subtle<"u"}static tryLoadNodeWebCrypto(){try{const{webcrypto:e}=require("crypto");return e}catch(e){throw e}}}class u{static async refreshCachedAccessToken(e,t){const s=await u.refreshToken(e,t.refresh_token);return u.toCachable(s)}static toCachable(e){return{...e,expires:Date.now()+e.expires_in*1e3}}static async refreshToken(e,t){const s=new URLSearchParams;s.append("client_id",e),s.append("grant_type","refresh_token"),s.append("refresh_token",t);const a=await fetch("https://accounts.spotify.com/api/token",{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:s}),r=await a.text();if(!a.ok)throw new Error(`Failed to refresh token: ${a.statusText}, ${r}`);return JSON.parse(r)}static generateCodeVerifier(e){let t="",s="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";for(let a=0;a<e;a++)t+=s.charAt(Math.floor(Math.random()*s.length));return t}static async generateCodeChallenge(e){const t=new TextEncoder().encode(e),s=await Y.current.subtle.digest("SHA-256",t),a=[...new Uint8Array(s)];return(typeof Buffer<"u"?Buffer.from(s).toString("base64"):btoa(String.fromCharCode.apply(null,a))).replace(/\+/g,"-").replace(/\//g,"_").replace(/=+$/,"")}static get crypto(){return this.hasSubtleCrypto?window.crypto:this.tryLoadNodeWebCrypto()}static get hasSubtleCrypto(){return typeof window<"u"&&typeof window.crypto<"u"&&typeof window.crypto.subtle<"u"}static tryLoadNodeWebCrypto(){try{const{webcrypto:e}=require("crypto");return e}catch(e){throw e}}}const d=class d{constructor(e,t,s=[]){n(this,"clientId");n(this,"clientSecret");n(this,"scopes");n(this,"configuration",null);this.clientId=e,this.clientSecret=t,this.scopes=s}get cache(){return this.configuration.cachingStrategy}setConfiguration(e){this.configuration=e}async getOrCreateAccessToken(){return await this.cache.getOrCreate(d.cacheKey,async()=>{const t=await this.getTokenFromApi();return u.toCachable(t)})}async getAccessToken(){return await this.cache.get(d.cacheKey)}removeAccessToken(){this.cache.remove(d.cacheKey)}async getTokenFromApi(){const e={grant_type:"client_credentials",scope:this.scopes.join(" ")},t=Object.keys(e).map(h=>h+"="+e[h]).join("&"),s=typeof Buffer<"u",a=`${this.clientId}:${this.clientSecret}`,r=s?Buffer.from(a).toString("base64"):btoa(a),i=await fetch("https://accounts.spotify.com/api/token",{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded",Authorization:`Basic ${r}`},body:t});if(i.status!==200)throw new Error("Failed to get access token.");return await i.json()}};n(d,"cacheKey","spotify-sdk:ClientCredentialsStrategy:token");let k=d;const m=class m{constructor(e,t,s){n(this,"clientId");n(this,"redirectUri");n(this,"scopes");n(this,"configuration",null);this.clientId=e,this.redirectUri=t,this.scopes=s}get cache(){return this.configuration.cachingStrategy}setConfiguration(e){this.configuration=e}async getOrCreateAccessToken(){return await this.cache.getOrCreate(m.cacheKey,async()=>{const t=await this.redirectOrVerifyToken();return u.toCachable(t)},async t=>u.refreshCachedAccessToken(this.clientId,t))}async getAccessToken(){return await this.cache.get(m.cacheKey)}removeAccessToken(){this.cache.remove(m.cacheKey)}async redirectOrVerifyToken(){const e=new URLSearchParams(window.location.hash.substring(1)),t=e.get("access_token");if(t)return Promise.resolve({access_token:t,token_type:e.get("token_type")??"",expires_in:parseInt(e.get("expires_in")??"0"),refresh_token:e.get("refresh_token")??"",expires:Number(e.get("expires"))||0});var a=(this.scopes??[]).join(" ");const r=new URLSearchParams;r.append("client_id",this.clientId),r.append("response_type","token"),r.append("redirect_uri",this.redirectUri),r.append("scope",a);const i="https://accounts.spotify.com/authorize?"+r.toString();return this.configuration.redirectionStrategy.redirect(i),C}};n(m,"cacheKey","spotify-sdk:ImplicitGrantStrategy:token");let R=m;const g=class g{constructor(e,t,s){n(this,"clientId");n(this,"redirectUri");n(this,"scopes");n(this,"configuration",null);this.clientId=e,this.redirectUri=t,this.scopes=s}get cache(){return this.configuration.cachingStrategy}setConfiguration(e){this.configuration=e}async getOrCreateAccessToken(){return await this.cache.getOrCreate(g.cacheKey,async()=>{const t=await this.redirectOrVerifyToken();return u.toCachable(t)},async t=>u.refreshCachedAccessToken(this.clientId,t))}async getAccessToken(){return await this.cache.get(g.cacheKey)}removeAccessToken(){this.cache.remove(g.cacheKey)}async redirectOrVerifyToken(){const t=new URLSearchParams(window.location.search).get("code");if(!t){const r=u.generateCodeVerifier(128),i=await u.generateCodeChallenge(r),p={verifier:r,expiresOnAccess:!0};this.cache.setCacheItem("spotify-sdk:verifier",p);const h=await this.generateRedirectUrlForUser(this.scopes,i);return await this.configuration.redirectionStrategy.redirect(h),C}this.removeCodeFromUrl();const s=await this.cache.get("spotify-sdk:verifier"),a=s==null?void 0:s.verifier;if(!a)throw new Error("No verifier found in cache - can't validate query string callback parameters.");return await this.configuration.redirectionStrategy.onReturnFromRedirect(),await this.exchangeCodeForToken(t,a)}removeCodeFromUrl(){const e=new URL(window.location.href);e.searchParams.delete("code");const t=e.search?e.href:e.href.replace("?","");window.history.replaceState({},document.title,t)}async generateRedirectUrlForUser(e,t){const s=e.join(" "),a=new URLSearchParams;return a.append("client_id",this.clientId),a.append("response_type","code"),a.append("redirect_uri",this.redirectUri),a.append("scope",s),a.append("code_challenge_method","S256"),a.append("code_challenge",t),`https://accounts.spotify.com/authorize?${a.toString()}`}async exchangeCodeForToken(e,t){const s=new URLSearchParams;s.append("client_id",this.clientId),s.append("grant_type","authorization_code"),s.append("code",e),s.append("redirect_uri",this.redirectUri),s.append("code_verifier",t);const a=await fetch("https://accounts.spotify.com/api/token",{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:s}),r=await a.text();if(!a.ok)throw new Error(`Failed to exchange code for token: ${a.statusText}, ${r}`);return JSON.parse(r)}};n(g,"cacheKey","spotify-sdk:AuthorizationCodeWithPKCEStrategy:token");let w=g;class X{async deserialize(e){const t=await e.text();return t.length>0?JSON.parse(t):null}}class Z{async validateResponse(e){switch(e.status){case 401:throw new Error("Bad or expired token. This can happen if the user revoked a token or the access token has expired. You should re-authenticate the user.");case 403:const t=await e.text();throw new Error(`Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won't help here. Body: ${t}`);case 429:throw new Error("The app has exceeded its rate limits.");default:if(!e.status.toString().startsWith("20")){const s=await e.text();throw new Error(`Unrecognised response code: ${e.status} - ${e.statusText}. Body: ${s}`)}}}}class ee{async handleErrors(e){return!1}}class te{async redirect(e){document.location=e.toString()}async onReturnFromRedirect(){}}class S{constructor(e,t=new Map,s=0,a=2*60*1e3){n(this,"storage");n(this,"updateFunctions");n(this,"autoRenewInterval");n(this,"autoRenewWindow");this.storage=e,this.updateFunctions=t,this.autoRenewInterval=s,this.autoRenewWindow=a,this.autoRenewInterval>0&&setInterval(()=>this.autoRenewRenewableItems(),this.autoRenewInterval)}async getOrCreate(e,t,s){s&&this.updateFunctions.set(e,s);const a=await this.get(e);if(a)return a;const r=await t();if(!r)throw new Error("Could not create cache item");return this.setCacheItem(e,r),r}async get(e){let t=this.storage.get(e),s=t?JSON.parse(t):null;if(this.itemDueToExpire(s)&&this.updateFunctions.has(e)){const a=this.updateFunctions.get(e);await this.tryUpdateItem(e,s,a),t=this.storage.get(e),s=t?JSON.parse(t):null}return s?s.expires&&(s.expires===-1||s.expires<=Date.now())?(this.remove(e),null):(s.expiresOnAccess&&s.expiresOnAccess===!0&&this.remove(e),s):null}set(e,t,s){const a=Date.now()+s,r={...t,expires:a};this.setCacheItem(e,r)}setCacheItem(e,t){const s=JSON.stringify(t);this.storage.set(e,s)}remove(e){this.storage.remove(e)}itemDueToExpire(e){return!e||!e.expires?!1:e.expires-Date.now()<this.autoRenewWindow}async autoRenewRenewableItems(){this.updateFunctions.forEach(async(e,t)=>{const s=await this.get(t);s&&e&&this.itemDueToExpire(s)&&await this.tryUpdateItem(t,s,e)})}async tryUpdateItem(e,t,s){try{const a=await s(t);a&&this.setCacheItem(e,a)}catch(a){console.error(a)}}}class se extends S{constructor(){super(new ae)}}class ae{get(e){return localStorage.getItem(e)}set(e,t){localStorage.setItem(e,t)}remove(e){localStorage.removeItem(e)}}class re extends S{constructor(){super(new ne)}}class ne{constructor(){n(this,"cache",new Map)}get(e){return this.cache.get(e)??null}set(e,t){this.cache.set(e,t)}remove(e){this.cache.delete(e)}}const y=class y{constructor(e,t){n(this,"clientId");n(this,"accessToken");n(this,"configuration",null);this.clientId=e,this.accessToken=t}get cache(){return this.configuration.cachingStrategy}setConfiguration(e){this.configuration=e}async getOrCreateAccessToken(){return this.accessToken=await this.cache.getOrCreate(y.cacheKey,async()=>{const e=u.toCachable(this.accessToken);return Promise.resolve(e)},async e=>u.refreshCachedAccessToken(this.clientId,e)),this.accessToken}async getAccessToken(){return await this.cache.get(y.cacheKey)}removeAccessToken(){this.cache.remove(y.cacheKey)}};n(y,"cacheKey","spotify-sdk:ProvidedAccessTokenStrategy:token");let b=y;const l=class l{constructor(e,t){n(this,"sdkConfig");n(this,"authenticationStrategy");n(this,"albums");n(this,"artists");n(this,"audiobooks");n(this,"browse");n(this,"chapters");n(this,"episodes");n(this,"recommendations");n(this,"markets");n(this,"player");n(this,"playlists");n(this,"shows");n(this,"tracks");n(this,"users");n(this,"search");n(this,"currentUser");this.sdkConfig=this.initilizeSdk(t),this.albums=new A(this),this.artists=new E(this),this.audiobooks=new U(this),this.browse=new P(this),this.chapters=new I(this),this.episodes=new O(this),this.recommendations=new L(this),this.markets=new B(this),this.player=new N(this),this.playlists=new _(this),this.shows=new M(this),this.tracks=new z(this),this.users=new J(this),this.currentUser=new V(this);const s=new j(this);this.search=s.execute.bind(s),this.authenticationStrategy=e,this.authenticationStrategy.setConfiguration(this.sdkConfig)}async makeRequest(e,t,s=void 0,a=void 0){try{const r=await this.authenticationStrategy.getOrCreateAccessToken(),i=r==null?void 0:r.access_token,p=l.rootUrl+t,h={method:e,headers:{Authorization:`Bearer ${i}`,"Content-Type":a??"application/json"},body:s?typeof s=="string"?s:JSON.stringify(s):void 0};this.sdkConfig.beforeRequest(p,h);const f=await this.sdkConfig.fetch(p,h);return this.sdkConfig.afterRequest(p,h,f),f.status===204?null:(await this.sdkConfig.responseValidator.validateResponse(f),this.sdkConfig.deserializer.deserialize(f))}catch(r){if(!await this.sdkConfig.errorHandler.handleErrors(r))throw r;return null}}initilizeSdk(e){const t=typeof window<"u";return{...{fetch:(a,r)=>fetch(a,r),beforeRequest:(a,r)=>{},afterRequest:(a,r,i)=>{},deserializer:new X,responseValidator:new Z,errorHandler:new ee,redirectionStrategy:new te,cachingStrategy:t?new se:new re},...e}}switchAuthenticationStrategy(e){this.authenticationStrategy=e,this.authenticationStrategy.setConfiguration(this.sdkConfig),this.authenticationStrategy.getOrCreateAccessToken()}async authenticate(){return this.authenticationStrategy.getOrCreateAccessToken()}async getAccessToken(){return this.authenticationStrategy.getAccessToken()}logOut(){this.authenticationStrategy.removeAccessToken()}static withUserAuthorization(e,t,s=[],a){const r=new w(e,t,s);return new l(r,a)}static withClientCredentials(e,t,s=[],a){const r=new k(e,t,s);return new l(r,a)}static withImplicitGrant(e,t,s=[],a){const r=new R(e,t,s);return new l(r,a)}static withAccessToken(e,t,s){const a=new b(e,t);return new l(a,s)}static async performUserAuthorization(e,t,s,a,r){const i=new w(e,t,s),h=await new l(i,r).authenticationStrategy.getOrCreateAccessToken();if(JSON.stringify({...h,expires:0})!==JSON.stringify(C)){if(typeof a=="string"){await fetch(a,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(h)});return}await a(h)}}};n(l,"rootUrl","https://api.spotify.com/v1/");let $=l;const T=()=>localStorage.getItem("spotify-sdk:AuthorizationCodeWithPKCEStrategy:token"),q=$.withUserAuthorization("2ed0e6e8b06842fb854cb15e1690a7b5",window.location.href,[]),F=T();console.log("before getAccessToken: "+!!F);q.getAccessToken().then(o=>{const e=T();console.log("after getAccessToken: "+!!e),F!=e&&alert("getAccessToken changed localStorage's token. You're probably about to redirect."),o?document.documentElement.innerHTML=`
          <p>Logged In</p>
          <button onclick="localStorage.clear(); location.reload();">Log Out</button>
        `:q.authenticate()});q.currentUser.profile().then(o=>{document.documentElement.innerHTML+=`<p>User: ${o.display_name}</p>`});
